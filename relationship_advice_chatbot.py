# -*- coding: utf-8 -*-
"""Relationship_Advice_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cykRge6WHwPGiil6geKla5lsNMwRH3-N
"""

!pip install openai
!pip install gradio

# Required imports
from google.colab import userdata
import openai
import gradio as gr
import os

# Fetch the OpenAI API key securely from the Colab Secrets menu
openai.api_key = userdata.get('openai')

# Define a function to handle chatbot responses
def chatbot_response(prompt, chat_history):
    try:
        # Add the conversation context to the OpenAI API call
        messages = [{"role": "system", "content": "You are a psychologist specializing in relationships. Help users with their relationship concerns."}]

        # Add previous chat history to the context
        for user_input, bot_response in chat_history:
            messages.append({"role": "user", "content": user_input})
            messages.append({"role": "assistant", "content": bot_response})

        # Add the latest user input
        messages.append({"role": "user", "content": prompt})

        # Get response from OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        bot_response = response['choices'][0]['message']['content']

        # Update chat history with the latest interaction
        chat_history.append((prompt, bot_response))
        return chat_history, chat_history, ""  # Clear the input box after sending
    except Exception as e:
        return chat_history, chat_history, f"API Error: {str(e)}"

# Create the Gradio app
with gr.Blocks() as app:
    # App title and description
    gr.Markdown("# **Relationship Advice Chatbot**")
    gr.Markdown("ðŸ’¬ Ask any relationship-related questions and receive expert advice!")

    chatbot = gr.Chatbot(label="Your Relationship Advisor")
    with gr.Row():
        with gr.Column(scale=4):
            msg = gr.Textbox(placeholder="Type your message here...", label="Your Message", lines=1)
        with gr.Column(scale=1):
            send_button = gr.Button("Send")
    with gr.Row():
        clear_button = gr.Button("Clear Chat")

    # Define actions for buttons
    chat_history = gr.State([])  # Store chat history
    send_button.click(chatbot_response, inputs=[msg, chat_history], outputs=[chatbot, chat_history, msg])
    clear_button.click(lambda: ([], []), None, [chatbot, chat_history])

# Launch the app
app.launch()